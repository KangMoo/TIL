## 기본 문법



기본 수학

```
Io> 1 + 1
2

Io> 2 sqrt
==> 1.4142135623730951
```



변수

```io
Io> a := 1
==> 1

Io> a
==> 1

Io> b := 2 * 3
==> 6

Io> a + b
==> 7
```



조건

```io
Io> a := 2

Io> (a == 1) ifTrue("a is one" println) ifFalse("a is not one" println)
==> a is not one

Io> if(a == 1, writeln("a is one"), writeln("a is not one"))
==> a is not one

```





리스트

```io
Io> d := List clone append(30, 10, 5, 20)    
==> list(30, 10, 5, 20)

Io> d size
==> 4

Io> d print
==> list(30, 10, 5, 20)

Io> d := d sort
==> list(5, 10, 20, 30)

Io> d first
==> 5

Io> d last
==> 30

Io> d at(2)
==> 20

Io> d remove(30)
==> list(5, 10, 20)

Io> d atPut(1, 123)
==> list(5, 123, 20)

Io> list(30, 10, 5, 20) select(>10)
==> list(30, 20)

Io> list(30, 10, 5, 20) detect(>10)
==> 30

Io> list(30, 10, 5, 20) map(*2)
==> list(60, 20, 10, 40)

Io> list(30, 10, 5, 20) map(v, v*2)
==> list(60, 20, 10, 40)
```



반복문

```io
Io> for(i, 1, 10, write(i, " "))
==> 1 2 3 4 5 6 7 8 9 10 

Io> d foreach(i, v, writeln(i, ": ", v))
==> 0: 5
1: 123
2: 20

Io> list("abc", "def", "ghi") foreach(println)
==> abc
def
ghi
```



딕셔너리

```io
Io> dict := Map clone    
Io> dict atPut("hello", "a greeting")   
Io> dict atPut("goodbye", "a parting")   
Io> dict hasKey("hello")   
==> true

Io> dict hasValue("a greeting")   
==> true

Io> dict at("hello")   
==> a greeting

Io> dict keys  
==> list("hello", "goodbye")

Io> dict foreach(k, v, (k .. ":" .. v) println)
==> hello: a greeting
goodbye: a parting
```



문자열

```io
Io> a := "foo"
==> "foo"

Io> b := "bar"
==> "bar"

Io> c := a .. b
==> "foobar"

Io> c at(0)
==> 102

Io> c at(0) asCharacter
==> "f"

Io> s := "this is a test"
==> "this is a test"

Io> words := s split(" ", "\t") print
==> "this", "is", "a", "test"

Io> s findSeq("is")
==> 2

Io> s findSeq("test")
==> 10

Io> s slice(10)
==> "test"

Io> s slice(2, 10)
==> "is is a "
```



객체

```io
Io> Contact := Object clone
==> Contact_0x7fad4365a640:
    type = "Contact"

Io> Contact type
==> Contact

Io> Contact proto type
==> Object

Io> Contact name ::= nil
==> nil

Io> Contact address ::= nil
==> nil

Io> Contact city ::= nil
==> nil

Io> holmes := Contact clone setName("Holmes") setAddress("221B Baker St") setCity("London")
==> Contact_0x7fad4365a640
    type = "Contact"
    name = "Holmes"
    address = "221B Baker St"
    city = "London"

Io> holmes slotNames
==> list("type", "name", "address", "city")

Io> Contact fullAddress := method(list(name, address, city) join("\n"))
==> method(
  list(name, address, city) join("\n")
)

Io> holmes fullAddress
==> "Holmes
221B Baker St
London"

Io> holmes getSlot("fullAddress")
==> method(
  list(name, address, city) join("\n")
)
```



do() 메서드로 객체 정의

```io
Io> Contact := Object clone do(
	name ::= nil
	address ::= nil
	city ::= nil
	fullAddress := method(list(name, address, city) join("\n"))
)
```



상속

```io

Io> BusinessContact := Contact clone do(
	companyName ::= ""
	fullAddress := method(
		list(companyName, "Care of: " .. name, address, city) join("\n")
	)
)

Io> steve := BusinessContact clone do(
	setName("Steve") 
	setCompanyName("Apple Inc.") 
	setAddress("1 Infinite Loop")
	setCity("Cupertino")
)

Io> steve fullAddress
==>
   Apple Inc.
   Care of: Steve Jobs
   1 Infinite Loop
   Cupertino
```



Lazy Evaluation

```io
Io> assert := method(
	call sender doMessage(call message argAt(0)) ifFalse(
		Exception raise("failed assertion: " .. call message asString)
	)
)

Io> assert(1 == 3)

==>
  Exception: failed assertion: assert(1 ==(3))
  ---------
  Exception raise                      Command Line 1
  Object assert                        Command Line 1
```



Introspection

```io
Io> 	Address := Object clone do(
		fields ::= list("name", "street", "city", "state", "zipCode")

		init := method(
			fields foreach(key, 
				if (self hasSlot(key) not,
					self newSlot(key, nil)
				) 
			)
		)

		emptyFields := method(
			fields select(k, self getSlot(k) == nil)
		)

		isValid := method(errors size == 0)

		assertValid := method(
			if (emptyFields size, 
				Exception raise(
				   self type .. " missing: " .. emptyFields join(", ")
				)
			)
		)
	)

	anAddress := Address clone setName("Alan") setStreet("6502 Mem Ln")

	anAddress assertValid

==>
  Exception: Address missing: city, state, zipCode
  ---------
  Exception raise                      test.io 19
  Address assertValid                  test.io 25
  CLI doFile                           Z_CLI.io 140
  CLI run                              IoState_runCLI() 1

```



예외

```io
Io> e := try(
    anAddress assertValid
)

Io> e catch(Exception,
    writeln("Caught: ", e error, "\nstack:\n", e coroutine backTraceString)
)

==>
	Caught: Address missing: state, zipCode
	stack:

	  Exception: Address missing: state, zipCode
	  ---------
	  Exception raise                      test.io 19
	  Address assertValid                  test.io 28
```



namespace

```io
Io> Lobby slotNames
==> list(set_, Protos, Lobby, _, exit, forward)
  
Io> Lobby Protos slotNames
==> list(Core, Addons)

Io> Lobby protos Core slotNames
==> list(Duration, Number, Eol, Coroutine, Sequence, DynLib, Normal, Notifier, ImmutableSequence, Collector, Debugger, Directory, CFunction, Block, vector, WeakLink, nil, false, CLI, Compiler, RunnerMixIn, Continue, File, TestSuite, Future, DirectoryCollector, Scheduler, UnitTest, FileCollector, FutureProxy, Date, true, Map, Break, List, AddonLoader, Call, String, Sandbox, Importer, Exception, DummyLine, Locals, Error, TestRunner, Profiler, Object, System, Path, Addon, SerializationStream, Return, OperatorTable, Vector, Message)

Io> Lobby protos Core Date slotNames
==> list(zone, -=, month, fromNumber, asSerialization, secondsToRun, +, print, isValidTime, setGmtOffset, fromSerialization, fromString, setDay, now, asJson, clock, timeStampString, setToUTC, asNumberString, setSecond, second, minute, format, year, convertToLocal, today, -, setYear, setMinute, hour, +=, asString, asAtomDate, secondsSinceNow, isDaylightSavingsTime, justSerialized, secondsSince, isDST, cpuSecondsToRun, gmtOffsetSeconds, asNumber, copy, isPast, gmtOffset, setHour, isToday, convertToUTC, convertToZone, setMonth, day)
```

